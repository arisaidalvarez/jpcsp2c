/*
 * This file is part of pcsp.
 *
 * pcsp is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * pcsp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with pcsp.  If not, see <http://www.gnu.org/licenses/>.
 */
#pragma once

extern char *GPR_REG[32];
extern char *COP0_REG[32];
extern char *COP1_REG_FP[32];
extern char *COP1_REG_FCR[32];

namespace DisAllegrex
{
	char* disAllegrex(unsigned int code, unsigned int pc);
    char* jump_decode(void);
    char *offset_decode(void);
          void Unknown( char *buf );
		  void J(char *buf);
          void JAL(char *buf);
          void BEQ(char *buf);
          void BNE(char *buf);
          void BLEZ(char *buf);
          void BGTZ (char *buf);
	      void ADDI(char *buf);
          void ADDIU(char *buf);
          void SLTI(char *buf);
          void SLTIU(char *buf);
          void ANDI(char *buf);
          void ORI(char *buf);
	      void XORI(char *buf);
	      void LUI(char *buf);
	      void COP0(char *buf);
	      void COP1(char *buf);
	      void BEQL(char *buf);
	      void BNEL(char *buf);
	      void BLEZL(char *buf);
	      void BGTZL (char *buf);
	      void MFIC(char *buf);
	      void MTIC(char *buf);
	      void HALT(char *buf);
	      void SEH(char *buf);
		  void BITREV(char *buf);
		  void WSBH(char *buf);
		  void WSBW(char *buf);
		  void EXT(char *buf);
		  void INS(char *buf);
		  void SEB(char *buf);
	      void LB(char *buf);
	      void LH(char *buf);
	      void LWL(char *buf);
	      void LW(char *buf);
	      void LBU(char *buf);
	      void LHU(char *buf);
	      void LWR(char *buf);
	      void SB(char *buf);
	      void SH(char *buf);
	      void SWL(char *buf);
	      void SW(char *buf);
	      void SWR(char *buf);
	      void LL(char *buf);
	      void LWC1(char *buf);
	      void LVS(char *buf);
	      void LVQ(char *buf);
	      void SC(char *buf);
	      void SWC1(char *buf);
	      void SVS(char *buf);
		  void SLL(char *buf);
          void SRL(char *buf);
		  void ROTR(char *buf);
		  void SRA(char *buf);
		  void SLLV(char *buf);
          void SRLV(char *buf);
          void ROTRV(char *buf);
		  void SRAV(char *buf);
		  void JR(char *buf);
		  void JALR(char *buf);
		  void MOVZ(char *buf);
		  void MOVN(char *buf);
		  void SYSCALL(char *buf);
		  void BREAK(char *buf);
		  void SYNC(char *buf);
		  void MFHI(char *buf);
		  void MTHI(char *buf);
		  void MFLO(char *buf);
		  void MTLO(char *buf);
		  void CLZ(char *buf);
		  void CLO(char *buf);
		  void MULT(char *buf);
		  void MULTU(char *buf);
		  void DIV(char *buf);
		  void DIVU(char *buf);
		  void MADD(char *buf);
		  void MADDU(char *buf);
		  void ADD(char *buf);
		  void ADDU(char *buf);
		  void SUB(char *buf);
		  void SUBU(char *buf);
		  void AND(char *buf);
		  void OR(char *buf);
		  void XOR(char *buf);
		  void NOR(char *buf); 
		  void SLT(char *buf);
		  void SLTU(char *buf);
		  void MAX(char *buf);
		  void MIN(char *buf);
		  void MSUB(char *buf);
		  void MSUBU(char *buf);
		  void BLTZ(char *buf);
		  void BGEZ(char *buf);
		  void BLTZL(char *buf);
		  void BGEZL(char *buf);
		  void BLTZAL(char *buf);
		  void BGEZAL(char *buf);
		  void BLTZALL(char *buf);
		  void BGEZALL(char *buf);
		  void MFC0(char *buf);
		  void ERET(char *buf);
		  void CFC0(char *buf);
		  void MTC0(char *buf);
		  void CTC0(char *buf);		  
		  void MFC1(char *buf);
		  void CFC1(char *buf);
		  void MTC1(char *buf);
		  void CTC1(char *buf);
		  void CVT_S_W(char *buf);
		  void BC1F(char *buf);
		  void BC1T(char *buf);
		  void BC1FL(char *buf);
		  void BC1TL(char *buf);
		  void ADD_S(char *buf);
          void SUB_S(char *buf);   
		  void MUL_S(char *buf);   
		  void DIV_S(char *buf);    
	      void SQRT_S(char *buf);
          void CVT_W_S(char *buf);
		  void ABS_S(char *buf);    
		  void MOV_S(char *buf);    
		  void NEG_S(char *buf);   
		  void ROUND_W_S(char *buf);  
		  void TRUNC_W_S(char *buf);  
		  void CEIL_W_S(char *buf);  
		  void FLOOR_W_S(char *buf);  
		  void C_COND_S(char *buf);  
		  void COP1_Unknown(char *buf);
		  void BVF(char *buf);
		  void BVT(char *buf);
	      void BVFL(char *buf);
	      void BVTL(char *buf);
	      void MFV(char *buf);
	      void MTV(char *buf);
	      void MFVC(char *buf);
	      void MTVC(char *buf);
		  void VADD(char *buf);
	      void VSUB(char *buf);
	      void VSBN(char *buf);
	      void VDIV(char *buf);
	      void VMUL(char *buf);
		  void VDOT(char *buf);
		  void VSCL(char *buf);
		  void VFPU_Unknown(char *buf);
		  void VHDP(char *buf);
		  void VDET(char *buf);
		  void VCRS(char *buf);
		  void VCMP(char *buf);
		  void VMIN(char *buf);
		  void VMAX(char *buf);
		  void VSLT(char *buf);
		  void VSCMP(char *buf);
		  void VSGE(char *buf);
		  void VMOV(char *buf);
          void VNEG(char *buf);
          void VABS(char *buf);
          void VIDT(char *buf);
          void VF2IN(char *buf);
          void VI2F(char *buf);
          void VWBN(char *buf);
		  void VSAT0(char *buf);
		  void VZERO(char *buf);
		  void VONE(char *buf);
		  void VSAT1(char *buf);
          void VRCP(char *buf);
		  void VSIN(char *buf);
		  void VRSQ(char *buf);
		  void VCOS(char *buf);
		  void VEXP2(char *buf);
		  void VSQRT(char *buf);
		  void VLOG2(char *buf);
		  void VASIN(char *buf);
		  void VNRCP(char *buf);
		  void VNSIN(char *buf);
		  void VREXP2(char *buf);
		  void VRNDS(char *buf);
		  void VRNDF1(char *buf);
		  void VRNDI(char *buf);
		  void VRNDF2(char *buf);
		  void VCMOVT(char *buf);
		  void VF2IZ(char *buf);
		  void VCMOVF(char *buf);
		  void VF2H(char *buf);
		  void VH2F(char *buf);
		  void VSBZ(char *buf);
		  void VLGB(char *buf);
		  void VUC2I(char *buf);
		  void VC2I(char *buf);
		  void VI2UC(char *buf);
		  void VI2US(char *buf);
		  void VI2C(char *buf);
		  void VI2S(char *buf);
		  void VSRT1(char *buf);
		  void VBFY1(char *buf);
		  void VSRT2(char *buf);
		  void VBFY2(char *buf);
		  void VF2IU(char *buf);
		  void VOCP(char *buf);
		  void VFAD(char *buf);
		  void VSOCP(char *buf);
		  void VAVG(char *buf);
		  void VSRT3(char *buf);
		  void VSRT4(char *buf);
		  void VUS2I(char *buf);
		  void VS2I(char *buf);
		  void VMFVC(char *buf);
		  void VMTVC(char *buf);
		  void VT4444(char *buf);
		  void VT5650(char *buf);
		  void VT5551(char *buf);
		  void VCST(char *buf);
		  void VF2ID(char *buf);
		  void VIIM(char *buf);
		  void VFIM(char *buf);
		  void VPFXS(char *buf);
		  void VPFXT(char *buf);
		  void VPFXD(char *buf);
		  void LVLQ(char *buf); 
		  void LVRQ(char *buf);
          void VHTFM2(char *buf);
          void VTFM2(char *buf);
          void VTFM3(char *buf);
          void VHTFM3(char *buf);
          void VHTFM4(char *buf);
          void VTFM4(char *buf);
          void VMMOV(char *buf);
          void VMZERO(char *buf);
          void VMIDT(char *buf);
          void VMONE(char *buf);
          void VROT(char *buf);
          void VMMUL(char *buf);
          void VMSCL(char *buf);
          void VQMUL(char *buf);
		  void SVLQ(char *buf);
	      void SVRQ(char *buf);
		  void SVQ(char *buf);
		  void SWB(char *buf);
		  void VNOP(char *buf);
	      void VSYNC(char *buf);
	      void VFLUSH(char *buf);
	      void ICACHE_FILL(char *buf);
		  void ICACHE_FILL_WITH_LOCK(char *buf);
		  void DCACHE_CREATE_DIRTY_EXCLUSIVE(char *buf);
		  void DCACHE_HIT_INVALIDATE(char *buf);
		  void DCACHE_HIT_WRITEBACK(char *buf);
		  void DCACHE_HIT_WRITEBACK_INVALIDATE(char *buf);
		  void CACHE_Unknown(char *buf);
		  void ICACHE_INDEX_INVALIDATE(char *buf);
		  void ICACHE_INDEX_UNLOCK(char *buf);
		  void DCACHE_FILL(char *buf);
		  void DCACHE_FILL_WITH_LOCK(char *buf);
		  void ICACHE_HIT_INVALIDATE(char *buf);
		  void DCACHE_INDEX_WRITEBACK_INVALIDATE(char *buf);
		  void DCACHE_INDEX_UNLOCK(char *buf);
		  void DCACHE_CREATE_DIRTY_EXCLUSIVE_WITH_LOCK(char *buf);
 
}